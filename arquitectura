/* @file HelloKeypad.pde
|| @version 1.0
|| @author Alexander Brevig
|| @contact alexanderbrevig@gmail.com
||
|| @description
|| | Demonstrates the simplest use of the matrix Keypad library.
|| #
*/
#include <stdio.h>
#include <Keypad.h>
#include "AsyncTaskLib.h"
#include "DHTStable.h"
#include <LiquidCrystal.h>
#include "String.h"

#define redPin 24
#define greenPin 23
#define bluePin 25 
#define buzzerPin 30
#define N_B0  31
#define N_C1  33
#define N_CS1 35
#define N_D1  37
#define N_DS1 39
#define N_E1  41
#define N_F1  44
#define N_FS1 46
#define N_G1  49
#define N_GS1 52
#define N_A1  55
#define N_AS1 58
#define N_B1  62
#define N_C2  65
#define N_CS2 69
#define N_D2  73
#define N_DS2 78
#define N_E2  82
#define N_F2  87
#define N_FS2 93
#define N_G2  98
#define N_GS2 104
#define N_A2  110
#define N_AS2 117
#define N_B2  123
#define N_C3  131
#define N_CS3 139
#define N_D3  147
#define N_DS3 156
#define N_E3  165
#define N_F3  175
#define N_FS3 185
#define N_G3  196
#define N_GS3 208
#define N_A3  220
#define N_AS3 233
#define N_B3  247
#define N_C4  262
#define N_CS4 277
#define N_D4  294
#define N_DS4 311
#define N_E4  330
#define N_F4  349
#define N_FS4 370
#define N_G4  392
#define N_GS4 415
#define N_A4  440
#define N_AS4 466
#define N_B4  494
#define N_C5  523
#define N_CS5 554
#define N_D5  587
#define N_DS5 622
#define N_E5  659
#define N_F5  698
#define N_FS5 740
#define N_G5  784
#define N_GS5 831
#define N_A5  880
#define N_AS5 932
#define N_B5  988
#define N_C6  1047
#define N_CS6 1109
#define N_D6  1175
#define N_DS6 1245
#define N_E6  1319
#define N_F6  1397
#define N_FS6 1480
#define N_G6  1568
#define N_GS6 1661
#define N_A6  1760
#define N_AS6 1865
#define N_B6  1976
#define N_C7  2093
#define N_CS7 2217
#define N_D7  2349
#define N_DS7 2489
#define N_E7  2637
#define N_F7  2794
#define N_FS7 2960
#define N_G7  3136
#define N_GS7 3322
#define N_A7  3520
#define N_AS7 3729
#define N_B7  3951
#define N_C8  4186
#define N_CS8 4435
#define N_D8  4699
#define N_DS8 4978
int tempH = 29;
int tempL = 26;
int luzH = 200;
int luzLow = 800;
int point = 0;
int state =0;
int i=0;
int x=0;
char ax [3];
const int tempMax=125;
const int tempMin=0;
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

const String menus[5]={"1.UmbralTempHigh",
                      "2.UmbralTempLow",
                      "3.UmbralLuzHigh",
                      "4.UmbralLuzLow",
                      "5.Reset"};
const byte ROWS = 4; //four rows
const byte COLS = 4; //three columns
char key;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {9, 8, 7, 6}; //connect to the row pinouts of the keypad
byte colPins[COLS] = {26, 27, 28,43}; //connect to the column pinouts of the keypad

byte heart[8] = {
  0b00001,
  0b00011,
  0b00111,
  0b01111,
  0b01111,
  0b00111,
  0b00011,
  0b00001
};

Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );

int melodia[] = {
  N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_F4, N_F4, N_F4, N_F4, N_F4, N_D4, N_D4, N_D4, N_F4, N_F4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, 0, N_F4, N_F4, N_F4, N_G4, N_GS4, N_A4, N_C5, N_A4, N_D5, N_D5, N_D5, N_A4, N_D5, N_C5, N_F4, N_F4, N_F4, N_F4, N_F4, N_D4, N_D4, N_D4, N_F4, N_F4, N_F4, N_F4, N_D4, N_F4, N_E4, N_D4, N_C4, 0, N_G4, N_E4, N_D4, N_D4, N_D4, N_D4, N_F3, N_G3, N_AS3, N_C4, N_D4, N_F4, N_C5, 0, N_F4, N_D4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_F4, N_F4, N_GS4, N_A4, N_C5, N_A4, N_GS4, N_G4, N_F4, N_D4, N_E4, N_F4, N_G4, N_A4, N_C5, N_CS5, N_GS4, N_GS4, N_G4, N_F4, N_G4, N_F3, N_G3, N_A3, N_F4, N_E4, N_D4, N_E4, N_F4, N_G4, N_E4, N_A4, N_A4, N_G4, N_F4, N_DS4, N_CS4, N_DS4, 0, N_F4, N_D4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_F4, N_F4, N_GS4, N_A4, N_C5, N_A4, N_GS4, N_G4, N_F4, N_D4, N_E4, N_F4, N_G4, N_A4, N_C5, N_CS5, N_GS4, N_GS4, N_G4, N_F4, N_G4, N_F3, N_G3, N_A3, N_F4, N_E4, N_D4, N_E4, N_F4, N_G4, N_E4, N_A4, N_A4, N_G4, N_F4, N_DS4, N_CS4, N_DS4, 
};

int duraciones[] = {		// array con la duracion de cada nota
  16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 16, 16, 16, 16, 16, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 2, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 8, 8, 16, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, 15, 8, 8, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 1
};
void actPanta(int a, int b){
  if(b != 5){
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.println(menus[a]);
    lcd.setCursor(0, 1);
    lcd.println(menus[b]);

  }
}
void setup(){
  lcd.createChar(0, heart);
  lcd.begin(16,2);
  Serial.begin(9600);
  actPanta(0, 1);
  lcd.setCursor(15, 0);
  lcd.write(byte(0)); 
}
void color (unsigned char red, unsigned char green, unsigned char blue) // the color generating function
{
analogWrite(redPin, red);
analogWrite(bluePin, blue);
analogWrite(greenPin, green);
}


void loop(){
  if(state==0){
    char key = keypad.getKey(); 
    if (key){
      if(key=='A'){
        if(point==0){
        }else if(point==4){        
          point--;
          actPanta(point, point+1);
          lcd.setCursor(15, 0);
          lcd.write(byte(0));  
        }else{
          point--;
          actPanta(point, point+1);
          lcd.setCursor(15, 0);
          lcd.write(byte(0));
        }
      }
      else if(key == 'B'){
        if(point==0){
          point++;
          actPanta(point-1, point);
          lcd.setCursor(15, 1);
          lcd.write(byte(0));
        }else if(point==4){        
        }else{
          point++;
          actPanta(point-1, point);
          lcd.setCursor(15, 1);
          lcd.write(byte(0));        
        }
      }
      if(key=='*'){
        i=0;
        x=0;
        if(point==0){
          state=1;   
          
            lcd.clear();       
        }else if(point==1){
          state=2;
            lcd.clear();
        }else if(point==4){
          state=4;
            lcd.clear();
        }
      }
    }    
  }else if(state==1){
  
    lcd.setCursor(0, 0);
    lcd.println("Ingrese TempH");
    char key = keypad.getKey(); 
    if (key){
      lcd.setCursor(i, 1);
      if(key!='*' && i<3){
        lcd.println(key);
        ax[i]= key; 
        i++;     
        //atoi();        
      } 
      else if(key=='*'){
          x=atoi(ax);
        if(x>tempL && x>tempMin && x<tempMax){
          tempH=x;
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.println("Actualizado");   
        }else{
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.println("Error!"); 
          lcd.println(x);         
        }   
        ax[0]=0;
        ax[1]=0;
        ax[2]=0;        
        delay(2000);
        state=0;  
        actPanta(0, 1);
        lcd.setCursor(15, 0);
        lcd.write(byte(0)); 
        point=0;                     
      }
    }  
  }else if(state==2){
  
    lcd.setCursor(0, 0);
    lcd.println("Ingrese TempL");
    char key = keypad.getKey(); 
    if (key){
      lcd.setCursor(i, 1);
      if(key!='*' && i<3){
        lcd.println(key);
        ax[i]= key; 
        i++;     
        //atoi();        
      } 
      else if(key=='*'){
          x=atoi(ax);
        if(x<tempH && x>tempMin && x<tempMax){
          tempL=x;
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.println("Actualizado");   
        }else{
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.println("Error!"); 
          lcd.println(x);         
        }   
        ax[0]=0;
        ax[1]=0;
        ax[2]=0;        
        delay(2000);
        state=0;  
        actPanta(0, 1);
        lcd.setCursor(15, 0);
        lcd.write(byte(0)); 
        point=0;                     
      }
    }  
  }else if(state==4){
    tempH = 29;
    tempL = 26;
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.println("Reseted"); 
    delay(2000);
    state=0;  
    actPanta(0, 1);
    lcd.setCursor(15, 0);
    lcd.write(byte(0)); 
    point=0; 
  }
}

